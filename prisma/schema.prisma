// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    ext_expires_in    Int

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    admin
    professor
    student
    unassigned
}

model User {
    id                  String              @id @default(cuid())
    name                String?
    email               String?             @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    role                UserRole            @default(unassigned)
    availabilities      Availability[]
    officeHoursSessions OfficeHourSession[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Availability {
    id                 String             @id @default(cuid())
    professor          User               @relation(fields: [professorId], references: [id])
    professorId        String
    startDate          DateTime
    endDate            DateTime
    officeHoursSession OfficeHourSession?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([startDate, endDate, professorId])
}

enum OfficeHourSessionStatus {
    requested
    confirmed
    cancelled
    attended
}

model OfficeHourSession {
    id             String                  @id @default(cuid())
    student        User                    @relation(fields: [studentId], references: [id])
    studentId      String
    status         OfficeHourSessionStatus
    Availability   Availability            @relation(fields: [availabilityId], references: [id])
    availabilityId String                  @unique
    comments       String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
